{"name": "test_method[时间戳为空 08]", "status": "failed", "statusDetails": {"message": "AssertionError: assert '集合不能为空' == '时间戳不能为空'\n  - 时间戳不能为空\n  + 集合不能为空", "trace": "self = <testcases.test_A.test_organization.test_enableOrganization.TestCaseCommon object at 0x000002406DEDB790>\nkwargs = {'apis': [{'assert': [{'expect': 200, 'type': 'status'}, {'expect': '时间戳不能为空', 'name': 'message', 'type': 'sys'}], 'da...ist': [35], 'timestamp': ' '}, 'method': 'post', 'path': '/ums/organization/enableOrganization'}, 'name': '时间戳为空 08'}]}\nmy_fixture = None\n\n    @allure.feature(\"测试接口\")\n    # yaml_data数据传递给\"kwargs\",ids拿到yaml文件中具体的name名称,在运行中显示\n    @pytest.mark.parametrize(\"kwargs\", yaml_data,\n                             ids=[i['apis'][0].get(\"name\") for i in yaml_data])\n    def test_method(self, kwargs, my_fixture):\n        # 添加token和时间戳\n        kwargs = set_token_timestamp(kwargs)  # 设置请求token(可以设置不同角色)\n        # 在yaml文件中添加时间戳\n        # 打印\n        print(\"yaml传输的值\" + str(kwargs))\n        # 实例化日志记录器对象\n        self.logger = Logger()\n        self.logger.info(\"\\n\" + \"测试用例开始执行\".center(120, \"=\"))\n        # 实例化HTTPClient,用于发送请求\n        self.http_client = HTTPClient_A()\n        # 实例化MySQLClient客户端\n        self.mysql_client = MySQLClient()\n    \n        args_dict = {}\n        # 对数据（当前用例）中的所有接口进行调用,所有接口存放在一个列表当中，遍历一次处理每个接口的调用和断言\n        apis = kwargs.get(\"apis\", \"\")\n        for api in apis:\n            # 将api转换很json字符串\n            api = json.dumps(api)\n            \"\"\"\n            将api字符串使用args_dict字典进行格式化\n            类似于\"%(name)s % {\"name\": \"tom\"}\" 这样tom就会被替换到name当中\n            args_dict = {},会在set_args传入形成字典,对yaml中的\"%(asn_code)s\" % {asn_code: xxx}的方式进行传递\n            %这种方式只有在字符串的情况下,才能进行传递,所以要转化\n            \"\"\"\n            # 将api字符串使用args_dict字典进行格式化\n            api = api % args_dict\n            # 将api字符串转换成json格式的数据\n            api = json.loads(api)\n            # print(\"业务流接口\" + str(api))\n    \n            # 调用接口（发送HTTP请求）\n            r = self.http_client.request(**api.get('data'))\n            print(\"响应数值信息: \" + str(r.json()))\n            print(\"status: \" + str(r.status_code))\n            # print(\"code: \" + str(jsonpath(r.json(), \"$..code\")[0]))\n            # 处理断言部分\n            for item in api.get(\"assert\", \"\"):\n                # HTTP状态码断言\n                if item[\"type\"] == \"status\":\n                    assert (r.status_code == item[\"expect\"])\n                # 关键业务信息断言\n                elif item[\"type\"] == \"sys\":\n                    current_value = jsonpath(r.json(), \"$..\" + item['name'])\n                    if current_value:\n>                       assert (current_value[0] == item[\"expect\"])\nE                       AssertionError: assert '集合不能为空' == '时间戳不能为空'\nE                         - 时间戳不能为空\nE                         + 集合不能为空\n\ntestcases\\test_A\\test_organization\\test_enableOrganization.py:67: AssertionError"}, "attachments": [{"name": "log", "source": "a86bc736-8f29-4d05-a2d1-cb0eec41bef7-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "kwargs", "value": "{'apis': [{'name': '时间戳为空 08', 'data': {'path': '/ums/organization/enableOrganization', 'method': 'post', 'headers': None, 'json': {'timestamp': ' ', 'organizationNoList': [35]}}, 'assert': [{'type': 'status', 'expect': 200}, {'type': 'sys', 'name': 'message', 'expect': '时间戳不能为空'}]}]}"}], "start": 1686643273169, "stop": 1686643273737, "uuid": "7c470a25-1e4c-46d8-9e2d-bfae7b56ee79", "historyId": "6a6e98820717b87a11578050c04cacfb", "testCaseId": "1ba5d185f5f8952a4afb4af1dfeb466f", "fullName": "testcases.test_A.test_organization.test_enableOrganization.TestCaseCommon#test_method", "labels": [{"name": "feature", "value": "测试接口"}, {"name": "parentSuite", "value": "testcases.test_A.test_organization"}, {"name": "suite", "value": "test_enableOrganization"}, {"name": "subSuite", "value": "TestCaseCommon"}, {"name": "host", "value": "admin"}, {"name": "thread", "value": "12684-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.test_A.test_organization.test_enableOrganization"}]}